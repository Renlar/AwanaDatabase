package awana.database;

import java.awt.Color;
import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Renlar
 */
public class DirectoryPage extends javax.swing.JFrame {

	private ArrayList<JComponent> tabs = new ArrayList<>();
	private Vector<Record> records;
	private Vector<Record> displayRecords;
	private DatabaseWrapper databaseWrapper = new DatabaseWrapper();
	private int selectedStudentID;

	/**
	 * Creates new form DirectoryPage
	 */
	public DirectoryPage() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recordData = new javax.swing.JTabbedPane();
        recordScrollPane = new javax.swing.JScrollPane();
        recordItemList = new javax.swing.JList();
        newRecord = new javax.swing.JButton();
        deleteRecord = new javax.swing.JButton();
        searchBox = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        recordScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        recordScrollPane.setName(""); // NOI18N
        recordScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectRecordHandler(evt);
            }
        });

        recordItemList.setModel(getListItems());
        recordItemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        recordItemList.setName(""); // NOI18N
        recordScrollPane.setViewportView(recordItemList);

        newRecord.setText("New");
        newRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newRecordHandler(evt);
            }
        });

        deleteRecord.setText("Delete");
        deleteRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteRecordHandler(evt);
            }
        });

        searchBox.setForeground(new java.awt.Color(150, 150, 150));
        searchBox.setText("Search");
        searchBox.setName(""); // NOI18N
        searchBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBoxFocusGainedHandler(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchBoxFocusLostHandler(evt);
            }
        });
        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchBoxKeyTypedHandler(evt);
            }
        });

        fileMenu.setText("File");
        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recordData, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recordData)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recordScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRecord)
                            .addComponent(deleteRecord))))
                .addContainerGap())
        );

        recordScrollPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newRecordHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newRecordHandler
		// TODO add your handling code here:
    }//GEN-LAST:event_newRecordHandler

    private void deleteRecordHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteRecordHandler
		String msgNoRecordSelected = "No Record Selected.";
		Record delete = getSelectedRecord();
		if (delete == null) {
			JOptionPane.showMessageDialog(this, msgNoRecordSelected,
					"Null Record",
					JOptionPane.YES_NO_OPTION);
			return;
		}
		String[] confirmDeleteOptions = {"Delete", "Cancel"};
		String msgConfirmDelete = "<html>Are You sure you want to delete,</html>\n<html>"
				+ delete.getFullNameLastFirst()
				+ "</html>.\n<html><b>This can not be undone.</b></html>";
		int choice = JOptionPane.showOptionDialog(this, msgConfirmDelete,
				"Confirm Delete",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.WARNING_MESSAGE,
				null,
				confirmDeleteOptions,
				confirmDeleteOptions[1]);
		if (choice == JOptionPane.YES_OPTION) {
		}
    }//GEN-LAST:event_deleteRecordHandler

    private void selectRecordHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectRecordHandler
		// TODO add your handling code here:
    }//GEN-LAST:event_selectRecordHandler

    private void searchBoxFocusGainedHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBoxFocusGainedHandler
		searchBox.setForeground(java.awt.Color.GREEN);
		searchBox.setText("");
    }//GEN-LAST:event_searchBoxFocusGainedHandler

    private void searchBoxKeyTypedHandler(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBoxKeyTypedHandler

		char pressed = evt.getKeyChar();
		if(pressed == '\b' || pressed == (char) 127){
			displayRecords = searchRecords(records, searchBox.getText());
		}
		displayRecords = searchRecords(displayRecords, searchBox.getText());

    }//GEN-LAST:event_searchBoxKeyTypedHandler

    private void searchBoxFocusLostHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBoxFocusLostHandler
		searchBox.setForeground(Color.GRAY);
		searchBox.setText("Search");
    }//GEN-LAST:event_searchBoxFocusLostHandler

	public void newRecord(){
		Student s = databaseWrapper.newStudent();
		Record r = s.createRecord();
		addAndDisplayRecord(r);
	}

	public void addAndDisplayRecord(Record r){
		records.add(r);
		sortAndDisplayRecordNames();
	}

	public void loadSortAndDisplayRecordNames() {
		records = databaseWrapper.getRecordsAsVector();
		sortAndDisplayRecordNames();
	}

	public void sortAndDisplayRecordNames(){
		SortRecordsAlphabeticlyQuickSort();
		displayRecords = records;
		recordItemList.setListData(displayRecords);
		updateRecordDisplay();
	}

	public void updateRecordDisplay(){
		recordItemList.revalidate();  //TODO: find out which of the following lines are necessary
		recordScrollPane.revalidate();
		recordScrollPane.repaint();
	}

	public void addTabs(ArrayList<JComponent> tabs) {
		JComponent tab;
		for (int i = 0; i < tabs.size(); i++) {
			tab = tabs.get(i);
			addTab(tab);
		}
	}

	public void addTab(JComponent tab) {
		this.tabs.add(tab);
		recordData.addTab(tab.getName(), tab);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(DirectoryPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DirectoryPage().setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteRecord;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newRecord;
    private javax.swing.JTabbedPane recordData;
    private javax.swing.JList recordItemList;
    private javax.swing.JScrollPane recordScrollPane;
    private javax.swing.JTextField searchBox;
    // End of variables declaration//GEN-END:variables

	private void SortRecordsAlphabeticlyQuickSort() {
		if(!records.isEmpty()){
			quickSortAlphabeticly(records, 0, records.size() - 1);
		}
	}

	private void quickSortAlphabeticly(Vector<Record> list, int left, int right) {
		int index = partition(list, left, right);
		if (left < index - 1) {
			quickSortAlphabeticly(list, left, index - 1);
		}
		if (index < right) {
			quickSortAlphabeticly(list, index, right);
		}
	}

	private int partition(Vector<Record> list, int left, int right) {
		int i = left, j = right;
		Record tmp1, tmp2;
		Record pivot = list.get((left + right) / 2);

		while (i <= j) {
			while (list.get(i).compairName(pivot) == -1) {
				i++;
			}
			while (list.get(i).compairName(pivot) == 1) {
				j--;
			}
			if (i <= j) {
				tmp1 = list.get(i);
				tmp2 = list.get(j);
				list.remove(i); list.add(i, tmp2);
				list.remove(j); list.add(j, tmp1);
				i++;
				j--;
			}
		}

		return i;
	}

	private ListModel getListItems() {
		DefaultListModel list = new DefaultListModel();
		return list;
	}

	private Record getSelectedRecord() {
		throw new UnsupportedOperationException("Not yet implemented");
	}

	private Vector<Record> searchRecords(Vector<Record> searchSet, String text) {
		Vector<Record> resultSet = new Vector<Record>();
		if(searchSet.isEmpty()){
			return null;
		}
		int counter = 0;
		while(counter < searchSet.size()){
			Record testee = searchSet.get(counter);
			if(testee.getLastName().contains(text) || testee.getFirstName().contains(text)){
				resultSet.add(testee);
			}
			counter++;
		}
		return resultSet;
	}
		//TODO: put searching entries and loading data in seperate threads from application to eliminate temperary locking of application.
}