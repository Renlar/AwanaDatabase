package com.liddev.awanadatabase;

import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author Renlar <liddev.com>
 */
public class DirectoryPage extends javax.swing.JFrame implements ListDataListener {

	private static DefaultListModel<Listing> listModel;
	private static DirectoryPage page;

	/**
	 * Creates new form DirectoryPage
	 *
	 * @param databaseWrapper the connection to the database;
	 */
	private DirectoryPage() {
		initComponents();
	}

	public static synchronized DirectoryPage get(){
		if(page == null){
			page = new DirectoryPage();
		}
		return page;
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recordData = new javax.swing.JTabbedPane();
        recordScrollPane = new javax.swing.JScrollPane();
        recordItemList = new javax.swing.JList();
        newRecord = new javax.swing.JButton();
        deleteRecord = new javax.swing.JButton();
        searchBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Awana Database");

        recordScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        recordScrollPane.setName(""); // NOI18N

        recordItemList.setModel(getListModel());
        recordItemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        recordItemList.setName(""); // NOI18N
        recordItemList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listingSelected(evt);
            }
        });
        recordItemList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                listingSelected(evt);
            }
        });
        recordScrollPane.setViewportView(recordItemList);

        newRecord.setText("New");
        newRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newRecordHandler(evt);
            }
        });

        deleteRecord.setText("Delete");
        deleteRecord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteRecordHandler(evt);
            }
        });

        searchBox.setForeground(new java.awt.Color(150, 150, 150));
        searchBox.setText("Search");
        searchBox.setName(""); // NOI18N
        searchBox.setPreferredSize(new java.awt.Dimension(200, 25));
        searchBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBoxFocusGainedHandler(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchBoxFocusLostHandler(evt);
            }
        });
        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBoxKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recordScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recordData, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recordData)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(recordScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newRecord)
                            .addComponent(deleteRecord))))
                .addContainerGap())
        );

        recordScrollPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newRecordHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newRecordHandler
		DataManager.get().newRecord();
    }//GEN-LAST:event_newRecordHandler

    private void deleteRecordHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteRecordHandler
		Listing delete = getSelectedListing();

		String msgNoRecordSelected = "No Record Selected.";
		String[] confirmDeleteOptions = {"Delete", "Cancel"};
		String msgConfirmDelete = "<html>Are You sure you want to delete,</html>\n<html>"
				+ delete.getFullNameLastFirst()
				+ "</html>.\n<html><b>This can not be undone.</b></html>";

		if (delete == null) {
			JOptionPane.showMessageDialog(this, msgNoRecordSelected,
					"Null",
					JOptionPane.YES_NO_OPTION);
			return;
		}

		int choice = JOptionPane.showOptionDialog(this, msgConfirmDelete,
				"Confirm Delete",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.WARNING_MESSAGE,
				null,
				confirmDeleteOptions,
				confirmDeleteOptions[1]);
		if (choice == JOptionPane.YES_OPTION) {
			DataManager.get().deleteRecord();
		}
    }//GEN-LAST:event_deleteRecordHandler

    private void searchBoxFocusGainedHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBoxFocusGainedHandler
		searchBox.setForeground(java.awt.Color.BLACK);

		if (searchBox.getText().equals("Search")) {
			searchBox.setText("");
		}
    }//GEN-LAST:event_searchBoxFocusGainedHandler

    private void searchBoxFocusLostHandler(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBoxFocusLostHandler
		searchBox.setForeground(Color.GRAY);

		if (searchBox.getText() == null || searchBox.getText().isEmpty()) {
			searchBox.setText("Search");
		}
    }//GEN-LAST:event_searchBoxFocusLostHandler

    private void listingSelected(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listingSelected
		DataManager.get().selectionChanged();
    }//GEN-LAST:event_listingSelected

    private void searchBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBoxKeyReleased
		DataManager.search(evt);
    }//GEN-LAST:event_searchBoxKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteRecord;
    private javax.swing.JButton newRecord;
    private javax.swing.JTabbedPane recordData;
    private javax.swing.JList recordItemList;
    private javax.swing.JScrollPane recordScrollPane;
    private javax.swing.JTextField searchBox;
    // End of variables declaration//GEN-END:variables

	public void selectListing(Listing l) {
		recordItemList.setSelectedValue(l, true);
	}

	private ListModel<Listing> getListModel() {//TODO: move into dataManager
		listModel = DataManager.get().getList();
		return listModel;
	}

	public Listing getSelectedListing() {
		return (Listing) recordItemList.getSelectedValue();
	}
	//TODO: put searching entries and loading data in seperate threads from application to eliminate temperary locking of application.

	@Override
	public void intervalAdded(ListDataEvent e) {
		//do-Nothing
	}

	@Override
	public void intervalRemoved(ListDataEvent e) {
		//do-Nothing
	}

	@Override
	public void contentsChanged(ListDataEvent e) {
		//do-Nothing
	}

	public String getSearchText() {
		return searchBox.getText();
	}

	public void removeAllRecordData() {
		recordData.removeAll();
	}

	public JTabbedPane recordData() {
		return recordData;
	}
}